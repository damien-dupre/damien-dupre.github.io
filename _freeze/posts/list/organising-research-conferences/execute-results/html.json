{
  "hash": "a98db6e5340b09a2820ac4667fbc364f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Organising Academic Conferences with Open Source Tools: Feedback and Reflections\"\n---\n\nLast year and again this year, I had the chance to join the organising committees of two separate academic events: the Conference of the International Society for Research on Emotion (**#ISRE2024** <https://www.isre2024.org/>) and the Conference of the Consortium of European Research on Emotion (**#CERE2025** <https://www.cere2025.com/>). For both, I was responsible for the websites and communications. As we were committed to using and encouraging open science practices, the committee and I decided to rely on open-source tools wherever possible. This led me to build the websites using Quarto. For CERE 2025, we also used the platform <https://www.sciencesconf.org/> to manage abstract submissions and the review process.\n\nThis post gives a short overview of the Quarto-based websites, their particular features, the experience with sciencesconf.org, and some broader reflections on what worked and what didn’t during the organisation.\n\n## 1.\tQuarto Websites for Conference Management\n\nA conference website doesn’t differ that much from a personal one. Quarto turned out to be a solid fit: free, fast to update, and flexible. You can generate tables, automate pages, and embed code wherever needed. I won’t walk through the full site structure (that’s all on GitHub [here for ISRE 2024](https://github.com/garymckeown/ISRE24) and [here for CERE 2025](https://github.com/damien-dupre/cere2025)), but I’ll highlight two features I found particularly useful.\n\nFirst, the automatic generation of pages for parallel sessions. Most conferences run several sessions at once, often grouped thematically or by format, such as symposia or individual talks. These need to be listed clearly, but the problem is that schedules change constantly until the last minute. Manually creating or editing dozens of pages is a waste of time. So, **I built a workflow using a Quarto template with a {purrr} loop that reads a spreadsheet of the programme and write a .qmd page before Quarto build it as .html in the website**. This allowed the site to generate or update pages dynamically, making the process far more efficient and much less error-prone.\n\n\n::: {.cell filename='~/cere2025/internal/computation_pages.R'}\n\n```{.r .cell-code}\n# List all the parallel sessions\nsessions <- parallel_sessions |>\n  distinct(session, track)\n\n# Read the quarto template\ntemplate <- readr::read_file(\"internal/parallel_session_template.qmd\")\n\n# Create a .qmd file per session\npage_creation <- function(session, track) {\n  file_conn <-\n    glue::glue(\"program/{paste(snakecase::to_any_case(session), track, sep = '_')}.qmd\") |>\n    file(\"w\")\n\n  writeLines(\n    glue::glue(\n      template,\n      .open = \"{{\", .close = \"}}\"\n    ), # glue double fenced because of code chunk capsule\n    con = file_conn\n  )\n\n  close(file_conn)\n}\n\npurrr::pwalk(sessions, page_creation)\n```\n:::\n\n\n::: {.callout-caution}\nExclude the folder `/internal` from `_quarto.yml` but call the script using the option pre-render:\n\n\n::: {.cell filename='~/cere2025/_quarto.yml'}\n\n```{.yml .cell-code}\nproject:\n  type: website\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n    - \"!internal/\"\n  pre-render: internal/computation_pages.R\n\n```\n:::\n\n:::\n\nSecond, the abstract book. Like the sessions, the book needed to group all the abstracts per session. Again, it made no sense to hardcode each one. The same kind of loop was used here, this time with **`knit_child()` to plug each abstract into a larger template**. The result was a clean, automatically generated PDF covering all contributions, updated in seconds if anything changed.\n\n\n::: {.cell filename='~/cere2025/internal/pdf_program.qmd'}\n\n```{.r .cell-code}\nsessions <- parallel_sessions |>\n  distinct(session, track)\n\nres <- map2(\n  sessions$session, sessions$track,\n  ~ knit_child(\n    here(\"internal/pdf_template.qmd\"),\n    envir = environment(),\n    quiet = TRUE\n  )\n)\ncat(unlist(res), sep = \"\\n\")\n```\n:::\n\n\n## 2.\tUsing sciencesconf.org for Abstract Management\n\nFor ISRE 2024, we used Microsoft’s CMT system, similar to EasyChair. For CERE 2025, we switched to sciencesconf.org. While both are free, sciencesconf.org is developed by a French research agency and open to international use. If you’re concerned about private providers like Microsoft or data server locations, it’s a decent alternative.\n\nSciencesconf.org can act as your main website, your payment system, or your submission and review platform. We used it just for the latter, as we already had a better website and a payment solution provided by the host university.\n\n**Its main advantage is simple: it costs nothing. It covers all basic needs for submission and review, including abstract uploads, reviewer management, and author communication**. But the interface is bare and, at times, clunky. It also struggles with more complex submission formats. For instance, our conference allowed symposia submissions, which can contain up to five abstracts. There was no clean way to gather and display that structure properly.\n\nSome features also require extra care. By default, it doesn’t collect co-author emails, only names and affiliations. You have to tick a specific box if you want co-authors to receive decision letters. The email system is another small hurdle: sciencesconf.org generates a new conference-specific email address, so if you already have an official one, you’ll need to redirect replies by setting it up in sciencesconf.org to avoid missing messages.\n\nI also found the reviewer interface quite awkward. It functions, but the design is poor and doesn’t look especially professional. Still, given its zero cost and openness, I would use it again—albeit with reservations.\n\n## 3.\tGeneral Observations and Lessons\n\n- One area that proved especially tricky was building the actual conference programme. This should be a collaborative effort, but not everyone uses a shared, editable spreadsheet. That creates confusion. Using something like Google Sheets, with full access for the relevant team members, should be standard practice.\n\n- To organise the programme, talks need to be grouped by topic, followed by assigning each group a session title. I experimented with GenAI tools like ChatGPT and Gemini to help with this, but since both rely on cosine similarity measures, the results weren’t convincing. The groupings felt off, and the suggested titles lacked quality.\n\n- Despite spending time building a web page for each parallel session, most attendees ended up referring to the overall PDF Gantt-style or long table schedule. Printing and displaying it on the doors of the venue was the best way to communicate it.\n\n- To finish, a quick note on social media. We ran a Twitter/X account with over 2,500 followers. Engagement was minimal. It may be time to stop treating X as a serious platform for promoting conferences. The audience is no longer there and, instead, LinkedIn might be the most suitable place to communicate.\n\nIf you’re organising a conference, open-source tools can save time and money, but they’re not perfect. Knowing when to automate and when to stick to something simpler is key.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}